import cv2
import time
import tensorflow.keras
from PIL import Image, ImageOps
import numpy as np
# The number of the classifier
number = 4
# Disable scientific notation for clarity
np.set_printoptions(suppress=True)
# Load the model
model = tensorflow.keras.models.load_model('keras_model.h5')
# Create the array of the right shape to feed into the keras model
# The 'length' or number of images you can put into the array is
# determined by the first position in the shape tuple, in this case 1.
data = np.ndarray(shape=(1, 224, 224, 3), dtype=np.float32)
# The label
f = open("labels.txt","r") 
lines = f.readlines()      #读取全部内容 ，并以列表方式返回
for line in lines:
    print(line)
    video = cv2.VideoCapture(0)
b = 0
while True:
        return_val, frame = video.read()
        # read()按帧读取视频，return_val,frame是获video.read()方法的两个返回值。
        # 其中return_val是布尔值，如果读取帧是正确的则返回True，如果文件读取到结尾，它的返回值就为False。
        # frame就是每一帧的图像，是个三维矩阵。
        if return_val:
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)  # BGR转RGB
            image = Image.fromarray(frame)# 实现array到image的转换
            #resize the image to a 224x224 with the same strategy as in TM2:
            #resizing the image to be at least 224x224 and then cropping from the center
            size = (224, 224)
            image = ImageOps.fit(image, size, Image.ANTIALIAS)
            #turn the image into a numpy array
            image_array = np.asarray(image)
            # Normalize the image
            normalized_image_array = (image_array.astype(np.float32) / 127.0) - 1
            # Load the image into the array
            data[0] = normalized_image_array
            # run the inference
            prediction = model.predict(data)
            a = np.argmax(prediction)
            if (prediction[0][a] > 0.9):
                if ((a != b) & (a != 0)):
                    b = a
                    temp = lines[a].split()
                    print(temp[1]+" ", end='')
        else:
            raise ValueError("No image!")
